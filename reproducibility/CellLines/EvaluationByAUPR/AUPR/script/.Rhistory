library(PRROC)
install.packages("PRROC")
library(PRROC)
fg<-rnorm(300)
fg
bg<-rnorm(500,-2)
roc<-roc.curve(scores.class0 = fg, scores.class1 = bg)
pr<-pr.curve(scores.class0 = fg, scores.class1 = bg)
roc
pr
pr<-pr.curve(scores.class0 = fg, scores.class1 = bg, curve = TRUE)
pr
plot(pr)
?pr.curve
df_true <- read.table("../../TrueLabels/true_labels.txt",
header = TRUE)
head(df_true)
df <- read.table("../../../SimlatedscATAC/output/simulated_mat_frip_0.4_noise_0.6_seed_10.txt",
header = TRUE)
colnames(df)
plot(pr)
pr$auc.integral
pr$auc.davis.goadrich
pr$curve
colnames(df)[1:10]
for(colname in colnames(df)[1:10]){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
}
scores.class0 <- df[[colname]][df_true[[celltype]] == 0]
scores.class0 <- df[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
plot(pr)
scores.class1
scores.class0
print(pr$type)
print(pr$auc.davis.goadrich)
print(pr$auc.integral)
for(colname in colnames(df)[1:10]){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
scores.class0 <- df[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
print(pr$auc.integral)
}
celltype
colnamedf_true
colnames(df_true)
df_auc <- setNames(data.frame(matrix(ncol = ncol(df_true), nrow = 0)),
colnames(df_true))
View(df_auc)
df_auc <- setNames(data.frame(matrix(ncol = ncol(df_true), nrow = 200)),
colnames(df_true))
View(df_auc)
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
df_auc[[celltype]][[idx]] <- pr$auc.integral
View(df_auc)
df_auc <- setNames(data.frame(matrix(ncol = ncol(df_true), nrow = 200)),
colnames(df_true))
for(colname in colnames(df)[1:10]){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
scores.class0 <- df[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
for(colname in colnames(df)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
scores.class0 <- df[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
colnames(df_score)
colnames(df)
201 / 200
201 %% 200
199 %% 200
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2]) %% 200
scores.class0 <- df_score[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df_score[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
df_score <- df
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2]) %% 200
scores.class0 <- df_score[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df_score[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
pr$auc.integral
View(df_auc)
200 %% 200
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
scores.class0 <- df_score[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df_score[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
if(idx %% 200 == 0){
idx <- idx %% 200 + 1
} else{
idx <- idx %% 200
}
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
colnamedf
colnames(df_score)
df_score[["CMP_1000"]]
colname <- "CMP_1000"
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
scores.class0 <- df_score[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df_score[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
pr$auc.integral
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
if(idx %% 200 == 0){
idx <- idx %% 200 + 1
} else{
idx <- idx %% 200
}
colnames(df_score)
801 %% 200
999 %200%
1
999 %% 200
df_auc <- NA
df_auc <- setNames(data.frame(matrix(ncol = ncol(df_true), nrow = 200)),
colnames(df_true))
View(df_auc)
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
scores.class0 <- df_score[[colname]][df_true[[celltype]] == 0]
scores.class1 <- df_score[[colname]][df_true[[celltype]] == 1]
pr <- pr.curve(scores.class0 = scores.class0,
scores.class1 = scores.class1,
curve = TRUE)
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
if(idx > 200){
if(idx %% 200 == 0){
idx <- 200
} else{
idx <- idx %% 200
}
}
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
pr <- pr.curve(scores.class0 = df_score[[colname]][df_true[[celltype]] == 0],
scores.class1 = df_score[[colname]][df_true[[celltype]] == 1],
curve = FALSE)
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
if(idx > 200){
if(idx %% 200 == 0){
idx <- 200
} else{
idx <- idx %% 200
}
}
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
for(colname in colnames(df_score)){
celltype <- stringr::str_split_fixed(colname, "_", 2)[, 1]
pr <- pr.curve(scores.class0 = df_score[[colname]][df_true[[celltype]] == 0],
scores.class1 = df_score[[colname]][df_true[[celltype]] == 1],
curve = FALSE)
idx <- as.integer(stringr::str_split_fixed(colname, "_", 2)[, 2])
if(idx > 200){
if(idx %% 200 == 0){
idx <- 200
} else{
idx <- idx %% 200
}
}
print(idx)
df_auc[[celltype]][[idx]] <- pr$auc.integral
}
View(df_auc)
?pr.curve
library(fclust)
library(cluster)
library(e1071)
library(foreach)
library(optparse)
library(PRROC)
?pr.curve
x <- rnorm( 1000 );
x
y <- rnorm( 1000, -1 )
pr <- pr.curve( x, y );
print( pr );
df_true <- read.table("../../TrueLabels/true_labels.txt",
header = TRUE)
head(dt_t)
head(dt_true)
head(df_true)
df_anno <- read.table("../../../Statistics/stat.txt", header = TRUE)
##########################################################################
# test
df_score <- read.table("../../../TagCount/TagCount.txt", header = TRUE)
##############################################################################
celltype_list <- unique(df_anno$CellType)
celltype_list
typeof(celltype_list)
celltype_list <- list(unique(df_anno$CellType))
celltype_list
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s", celltype))
}
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
}
colnames(df_anno_sub)
colnames(df_anno)
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
df_anno_sub <- subset(df_anno_sub, CellType == celltype)
}
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
df_anno_sub <- subset(df_anno, CellType == celltype)
}
View(df_anno_sub)
View(df_anno)
View(df_anno_sub)
df_anno_sub$CellType
celltype
celltype_list <- unique(df_anno$CellType)
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
df_anno_sub <- subset(df_anno, CellType == celltype)
}
View(df_anno_sub)
df_score_sub <- subset(df_score, select = df_anno_sub$Runs)
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = nrow(df_score))),
c("Runs", "CellType", "AUPR"))
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = ncol(df_score))),
c("Runs", "CellType", "AUPR"))
View(df_auc)
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
}
library(fclust)
library(cluster)
library(e1071)
library(foreach)
library(optparse)
library(PRROC)
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
}
round(pr$auc.integral, digits = 3)
colname
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
aupr <- round(pr$auc.integral, digits = 3)
df_auc <- rbind(df_auc, c("colname", "celltype", aupr))
}
View(df_auc)
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = 0)),
c("Runs", "CellType", "AUPR"))
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
aupr <- round(pr$auc.integral, digits = 3)
df_auc <- rbind(df_auc, c(colname, celltype, aupr))
}
View(df_auc)
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = 1)),
c("Runs", "CellType", "AUPR"))
View(df_auc)
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = 0)),
c("Runs", "CellType", "AUPR"))
View(df_auc)
colname
celltype
aupr
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = ncol(df_score))),
c("Runs", "CellType", "AUPR"))
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = ncol(df_score))),
c("Runs", "CellType", "AUPR"))
idx <- 1
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
df_auc[["Runs"]][idx] <- colname
df_auc[["CellType"]][idx] <- celltype
df_auc[["AUPR"]][idx] <- round(pr$auc.integral, digits = 3)
idx <- idx + 1
}
View(df_auc)
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
df_anno_sub <- subset(df_anno, CellType == celltype)
df_score_sub <- subset(df_score, select = df_anno_sub$Runs)
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
df_auc[["Runs"]][idx] <- colname
df_auc[["CellType"]][idx] <- celltype
df_auc[["AUPR"]][idx] <- round(pr$auc.integral, digits = 3)
idx <- idx + 1
}
}
View(df_auc)
df_auc$AUPR
dim(df_auc)
df_auc[["Runs"]][1224] <- colname
View(df_auc)
df_anno$CellType
df_true$H1ESC
df_anno$CellType
df_anno <- stringr::str_replace_all(df_anno$CellType, c("H1-ESC" = "H1ESC"))
celltype_list <- unique(df_anno$CellType)
df_anno <- read.table("../../../Statistics/stat.txt", header = TRUE)
df_anno$CellType <- stringr::str_replace_all(df_anno$CellType, c("H1-ESC" = "H1ESC"))
celltype_list <- unique(df_anno$CellType)
df_auc <- setNames(data.frame(matrix(ncol = 3,
nrow = ncol(df_score))),
c("Runs", "CellType", "AUPR"))
idx <- 1
for(celltype in celltype_list){
message(sprintf("computing AUPR for cell type: %s \n", celltype))
df_anno_sub <- subset(df_anno, CellType == celltype)
df_score_sub <- subset(df_score, select = df_anno_sub$Runs)
for(colname in colnames(df_score_sub)){
pr <- pr.curve(scores.class0 = df_score_sub[[colname]][df_true[[celltype]] == 1],
scores.class1 = df_score_sub[[colname]][df_true[[celltype]] == 0],
curve = FALSE)
df_auc[["Runs"]][idx] <- colname
df_auc[["CellType"]][idx] <- celltype
df_auc[["AUPR"]][idx] <- round(pr$auc.integral, digits = 3)
idx <- idx + 1
}
}
View(df_auc)
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(BuenColors))
suppressPackageStartupMessages(library(irlba))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(patchwork))
suppressPackageStartupMessages(library(Rtsne))
library(optparse)
?Rtsne
library(PRROC)
?pr.curve
